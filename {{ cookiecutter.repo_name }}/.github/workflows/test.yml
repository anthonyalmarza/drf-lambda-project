{% raw %}name: Test
on:
  push
jobs:
  test:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis
        ports:
          - 6379/tcp
      postgres:
        image: mdillon/postgis:11
        ports:
          - 5432/tcp
        env:
          POSTGRES_USER: CHANGE_ME
          POSTGRES_PASSWORD: CHANGE_ME
          POSTGRES_DB: CHANGE_ME
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Checkout
        uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8
      #----------------------------------------------
      #       install and configure poetry
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1.1.1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        run: poetry install
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      #----------------------------------------------
      #              run test suite
      #----------------------------------------------
      - run: poetry run manage collectstatic --noinput
      - run: poetry run manage compress --force
      - name: Run Tests
        run: poetry run tests
        env:
          DB_HOST: 127.0.0.1
          DB_PORT: ${{ job.services.postgres.ports[5432] }}
      #----------------------------------------------
      #             upload coverage stats
      #----------------------------------------------
      - name: Upload coverage
        run: poetry run codecov
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
  lint:
    runs-on: ubuntu-latest
    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Checkout
        uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8
      #----------------------------------------------
      #       install and configure poetry
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1.1.1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        run: poetry install
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      #----------------------------------------------
      #                run linters
      #----------------------------------------------
      - name: Black
        run: poetry run black . --check
      - name: mypy
        run: poetry run mypy ./src
      - name: flake 8
        run: poetry run flake8 . --count --statistics{% endraw %}
