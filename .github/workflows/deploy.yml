name: Staging
on:
  release:
    types: [created]

env:
  AWS_REGION: us-east-1
  AWS_ACCOUNT_ID: ${{secrets.AWS_ACCOUNT_ID}}
  AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
  AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}

jobs:
  deploy:
    name: Deploy to staging
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/v') && contains(github.ref, '-rc') }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8
      #----------------------------------------------
      #       install and configure poetry
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1.1.1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        run: poetry install
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      #----------------------------------------------
      #              Collect Statics
      #----------------------------------------------
      - name: Collect statics
        run: poetry run src/CHANGE_ME/manage.py collectstatic --noinput --settings=CHANGE_ME.settings
      #----------------------------------------------
      #                 Compress
      #----------------------------------------------
      - name: Compress statics
        run: poetry run src/CHANGE_ME/manage.py compress --force --settings=CHANGE_ME.settings
      #----------------------------------------------
      #                 Requirements
      #----------------------------------------------
      - name: Collect Requirements
        run: poetry export -o src/requirements.txt --without-hashes
      #----------------------------------------------
      #                  deploy
      #----------------------------------------------
      - uses: quadio-media/acru-l-action@v0.1.5
        with:
          subcommand: deploy --require-approval=never
        env:
          CONFIG_FILE_PATH: ./.aws/staging.toml
